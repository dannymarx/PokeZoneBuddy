name: Build & Release macOS + Publish Manifest

on:
  push:
    branches: [ main ]
    paths: [ "VERSION" ]

permissions:
  contents: write   # nötig für Release + Commit in /docs

env:
  APP_NAME: PokeZoneBuddy            # passe an
  SCHEME: PokeZoneBuddy              # passe an
  CONFIG: Release

jobs:
  release:
    runs-on: macos-latest

    steps:
      - uses: actions/checkout@v4

      - name: Read VERSION
        id: v
        run: echo "ver=$(tr -d ' \n\r' < VERSION)" >> "$GITHUB_OUTPUT"

   - name: Xcode archive (unsigned)
  run: |
    set -e
    xcodebuild -scheme "$SCHEME" -configuration "$CONFIG" \
      -archivePath build/App.xcarchive \
      -destination "generic/platform=macOS" archive \
      CODE_SIGNING_ALLOWED=NO \
      CODE_SIGNING_REQUIRED=NO \
      CODE_SIGN_IDENTITY="" \
      DEVELOPMENT_TEAM=""

- name: Prepare DMG payload
  run: |
    set -e
    APP_PATH="build/App.xcarchive/Products/Applications/${APP_NAME}.app"
    test -d "$APP_PATH" || { echo "App not found at $APP_PATH"; exit 1; }
    mkdir -p build/dmg_src
    cp -R "$APP_PATH" "build/dmg_src/"
    ln -s /Applications "build/dmg_src/Applications"

- name: Create DMG
        id: dmg
        run: |
          set -e
          DMG="build/${APP_NAME}-${{ steps.v.outputs.ver }}.dmg"
          hdiutil create -volname "${APP_NAME}" \
                         -srcfolder "build/dmg_src" \
                         -ov -format UDZO "$DMG"
          echo "path=$DMG" >> "$GITHUB_OUTPUT"

- name: Create Git tag and GitHub Release
        id: rel
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ steps.v.outputs.ver }}
          name: v${{ steps.v.outputs.ver }}
          generate_release_notes: true
          files: ${{ steps.dmg.outputs.path }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

- name: Build manifest -> /docs/version.json
        run: |
          set -e
          VER="${{ steps.v.outputs.ver }}"
          URL="${{ steps.rel.outputs.html_url }}"
          NOW="$(date -u +%Y-%m-%dT%H:%M:%SZ)"
          mkdir -p docs
          cat > docs/version.json <<JSON
          {
            "latest": "${VER}",
            "minSupported": "${VER}",
            "releasedAt": "${NOW}",
            "notesURL": "${URL}",
            "destinations": {
              "macOS": "${URL}"
            },
            "critical": false
          }
          JSON
          echo "Wrote docs/version.json:"
          cat docs/version.json

- name: Commit manifest to repo
        run: |
          set -e
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git add docs/version.json
          git commit -m "Publish manifest v${{ steps.v.outputs.ver }} [skip ci]" || echo "No changes to commit"
          git push
