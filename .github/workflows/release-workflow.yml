name: Release

on:
  push:
    branches:
      - main
    paths:
      - VERSION
  workflow_dispatch:

permissions:
  contents: write

jobs:
  build:
    name: Build & Package
    runs-on: macos-26
    env:
      MACOSX_DEPLOYMENT_TARGET: "26.0"
    outputs:
      version: ${{ steps.read_version.outputs.version }}
      dmg_path: ${{ steps.package.outputs.dmg_path }}
      release_tag: ${{ steps.tag.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Read release version
        id: read_version
        run: |
          set -euo pipefail
          version=$(tr -d ' \n' < VERSION)
          if [[ -z "$version" ]]; then
            echo "VERSION file is empty" >&2
            exit 1
          fi
          echo "version=$version" >> "$GITHUB_OUTPUT"

      - name: Resolve macOS build settings
        id: build_settings
        run: |
          set -euo pipefail
          settings=$(xcodebuild \
            -project PokeZoneBuddy.xcodeproj \
            -scheme "PokeZoneBuddy" \
            -configuration Release \
            -destination 'generic/platform=macOS' \
            -showBuildSettings)

          marketing=$(printf '%s\n' "$settings" | awk '/^[[:space:]]*MARKETING_VERSION = / {print $3; exit}')
          if [[ -z "$marketing" ]]; then
            echo "MARKETING_VERSION missing from build settings" >&2
            exit 1
          fi

          target=$(printf '%s\n' "$settings" | awk '/^[[:space:]]*MACOSX_DEPLOYMENT_TARGET = / {print $3; exit}')
          if [[ -z "$target" ]]; then
            echo "MACOSX_DEPLOYMENT_TARGET missing from build settings" >&2
            exit 1
          fi

          echo "marketing_version=$marketing" >> "$GITHUB_OUTPUT"
          echo "deployment_target=$target" >> "$GITHUB_OUTPUT"

      - name: Validate versions
        run: |
          set -euo pipefail
          version="${{ steps.read_version.outputs.version }}"
          marketing="${{ steps.build_settings.outputs.marketing_version }}"
          if [[ "$marketing" != "$version" ]]; then
            echo "Version mismatch: MARKETING_VERSION=$marketing, VERSION=$version" >&2
            exit 1
          fi

          target="${{ steps.build_settings.outputs.deployment_target }}"
          if [[ "$target" != "26.0" ]]; then
            echo "Deployment target mismatch: MACOSX_DEPLOYMENT_TARGET=$target, expected 26.0" >&2
            exit 1
          fi

      - name: Compose release tag
        id: tag
        run: |
          set -euo pipefail
          echo "tag=v${{ steps.read_version.outputs.version }}" >> "$GITHUB_OUTPUT"

      - name: Build app
        run: |
          set -euo pipefail
          xcodebuild \
            -project PokeZoneBuddy.xcodeproj \
            -scheme "PokeZoneBuddy" \
            -configuration Release \
            -destination 'generic/platform=macOS' \
            -derivedDataPath build \
            CODE_SIGNING_ALLOWED=NO \
            CODE_SIGN_IDENTITY="" \
            DEVELOPMENT_TEAM="" \
            clean build

      - name: Prepare dist directory
        run: |
          set -euo pipefail
          mkdir -p dist

      - name: Create DMG
        id: package
        run: |
          set -euo pipefail
          VERSION="${{ steps.read_version.outputs.version }}"
          APP_PATH="build/Build/Products/Release/PokeZoneBuddy.app"
          if [[ ! -d "$APP_PATH" ]]; then
            echo "App bundle not found at $APP_PATH" >&2
            ls -R build/Build/Products/Release || true
            exit 1
          fi

          DMG_NAME="PokeZoneBuddy-${VERSION}.dmg"
          STAGE="dist/ReleaseDisk"

          rm -rf "$STAGE"
          mkdir -p "$STAGE"

          rsync -a "$APP_PATH" "$STAGE/"
          ln -s /Applications "$STAGE/Applications"

          hdiutil create \
            -volname "PokeZoneBuddy ${VERSION}" \
            -srcfolder "$STAGE" \
            -ov -format UDZO "dist/${DMG_NAME}"

          rm -rf "$STAGE"

          echo "dmg_path=dist/${DMG_NAME}" >> "$GITHUB_OUTPUT"

      - name: Upload DMG artifact
        uses: actions/upload-artifact@v4
        with:
          name: release-dmg
          path: ${{ steps.package.outputs.dmg_path }}
          if-no-files-found: error

  release:
    name: Tag & Publish
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Download DMG artifact
        uses: actions/download-artifact@v4
        with:
          name: release-dmg
          path: dist

      - name: Create GitHub release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.build.outputs.release_tag }}
          name: PokeZoneBuddy ${{ needs.build.outputs.release_tag }}
          generate_release_notes: true
          files: ${{ needs.build.outputs.dmg_path }}
